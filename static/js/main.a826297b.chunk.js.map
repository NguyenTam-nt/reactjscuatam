{"version":3,"sources":["conponents/ColorPicker.js","conponents/SetingColor.js","conponents/Result.js","conponents/Reset.js","App.js","reportWebVitals.js","index.js"],"names":["ColorPicker","props","showColor","color","background","getColor","map","index","style","className","onClick","onReceColor","setColor","SetingColor","currentSize","size","changeSize","value","onSetSize","type","Result","id","border","fontSize","Reset","setReset","App","useState","name","setName","setSize","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMA0CeA,MAvCf,SAAqBC,GACX,IAGIC,EAAY,SAACC,GACX,MAAO,CACHC,WAAYD,IAQhBE,EAbW,CAAC,MAAO,OAAQ,SAAU,SAAU,QAAS,SAAU,OAAQ,OAAQ,SAa3DC,KAAI,SAACH,EAAOI,GACX,OAAQ,sBACHC,MAAON,EAAUC,GAChBM,UAAWN,IAAUF,EAAME,MAAQ,SAAW,GAC9CO,QAAS,YAP9B,SAACP,GACZF,EAAMU,YAAYR,GAM8BS,CAAST,KAHVI,MASjD,OAEI,qBAAKE,UAAU,sCAAf,SACA,sBAAKA,UAAU,sBAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,oBAAIA,UAAU,cAAd,4BAEF,qBAAKA,UAAU,aAAf,SACMJ,UCMTQ,MAtCf,SAAqBZ,GACjB,IAAIa,EAAcb,EAAMc,KAEpBC,EAAa,SAACC,IACdH,GAAeG,IACG,IAAMH,GAAc,EAClCb,EAAMiB,UAAUJ,GAGRA,EADDA,EAAc,GACC,GAEA,GAQtB,OACc,sBAAKL,UAAU,sBAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBAAIA,UAAU,cAAd,oBAAoCK,EAApC,UAEF,sBAAKL,UAAU,aAAf,UACE,wBAAQU,KAAK,SAASV,UAAU,kBAC/BC,QAAS,WAAKM,EAAW,IAD1B,uBADF,OAKE,wBAAQG,KAAK,SAASV,UAAU,iBAChCC,QAAS,WAAKM,GAAY,IAD1B,8BCVfI,MAnBf,SAAgBnB,GASJ,OACY,sBAAKQ,UAAU,0CAAf,UACK,yCAAYR,EAAME,MAAlB,iBAAuCF,EAAMc,KAA7C,QACD,qBAAKM,GAAG,UAAUb,MAVvB,CACHL,MAAOF,EAAME,MACbmB,OAAQ,aAAerB,EAAME,MAC7BoB,SAAUtB,EAAMc,KAAO,MAOf,qCCJbS,MAPf,SAAevB,GAEH,OACI,wBAAQkB,KAAK,SAASV,UAAU,kBAAkBC,QAAS,kBAAKT,EAAMwB,YAAtE,oBCiCDC,MAhCf,WACI,MAAsBC,mBAAS,OAA/B,mBAAKC,EAAL,KAAWC,EAAX,KACA,EAAsBF,mBAAS,IAA/B,mBAAKZ,EAAL,KAAWe,EAAX,KAgBQ,OACQ,qBAAKrB,UAAU,kBAAf,SACE,sBAAKA,UAAU,MAAf,UACE,cAAC,EAAD,CAAaN,MAAOyB,EAAMjB,YAlB9B,SAACR,GACf0B,EAAQ1B,MAkBU,sBAAKM,UAAU,sCAAf,UACK,cAAC,EAAD,CAAaM,KAAQA,EAAMG,UAfpC,SAACa,IACZA,GAAQ,GAAKA,GAAQ,KACtBD,EAAQC,MAca,cAAC,EAAD,CAAON,SAVlB,WACZK,EAAQ,IACRD,EAAQ,aAUU,cAAC,EAAD,CAAQ1B,MAAOyB,EAAMb,KAAQA,UCtBtCiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAI1Bb,K","file":"static/js/main.a826297b.chunk.js","sourcesContent":["import '../App.css' ;\r\nimport '../bootstrap.css';\r\n\r\nfunction ColorPicker(props) {\r\n          let colorArray = ['red', 'blue', 'yellow', 'violet', 'green', 'orange', 'pink', 'Gray', 'black']\r\n     \r\n    \r\n          let showColor = (color) => {\r\n                return {\r\n                    background: color\r\n                }\r\n          }\r\n\r\n        \r\n          let setColor = (color) => {\r\n              props.onReceColor(color)   \r\n          }\r\n            let getColor  = colorArray.map((color, index) => {\r\n                                        return( <span key = {index}\r\n                                             style={showColor(color)}\r\n                                              className={color === props.color ? 'active' : ''}\r\n                                              onClick={() => {setColor(color)}}\r\n                                              >\r\n                                              </span>)\r\n            })\r\n          \r\n\r\n            return (\r\n              \r\n                <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"panel panel-primary\">\r\n                  <div className=\"panel-heading\">\r\n                    <h3 className=\"panel-title\">Color Picker</h3>\r\n                  </div>\r\n                  <div className=\"panel-body\">\r\n                       {getColor}         \r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )\r\n}\r\n\r\nexport default ColorPicker;\r\n","import '../App.css';\r\nimport '../bootstrap.css';\r\n\r\nfunction SetingColor(props) {\r\n    let currentSize = props.size;\r\n\r\n    let changeSize = (value)=> {\r\n        currentSize += value;\r\n        if(currentSize <= 24 && currentSize >=8) {\r\n            props.onSetSize(currentSize)\r\n        }else {\r\n                if(currentSize > 24) {\r\n                    currentSize = 24\r\n                }else {\r\n                    currentSize = 8\r\n                }\r\n\r\n\r\n        }\r\n        \r\n    }\r\n\r\n            return (                        \r\n                          <div className=\"panel panel-warning\">\r\n                            <div className=\"panel-heading\">\r\n                              <h3 className=\"panel-title\">Size : {currentSize}px</h3>\r\n                            </div>\r\n                            <div className=\"panel-body\">\r\n                              <button type=\"button\" className=\"btn btn-success\"\r\n                               onClick={()=>{changeSize(1)}}\r\n                               >\r\n                                  Tăng</button>&nbsp;\r\n                              <button type=\"button\" className=\"btn btn-danger\" \r\n                              onClick={()=>{changeSize(-1)}}\r\n                              >\r\n                                  Giảm</button>\r\n                            </div>\r\n                          </div>\r\n            )\r\n}\r\n\r\nexport default SetingColor;","import '../App.css';\r\nimport '../bootstrap.css';\r\n\r\nfunction Result(props) {\r\n            let setColor = () => {\r\n                return {\r\n                    color: props.color,\r\n                    border: \"1px solid \" + props.color,\r\n                    fontSize: props.size + \"px\"\r\n                }\r\n            }\r\n\r\n            return (\r\n                        <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                             <p>Color : {props.color} - Fontsize : {props.size}px</p>\r\n                            <div id=\"content\" style={setColor()}>\r\n                              Result after change\r\n                            </div>\r\n                        </div>\r\n            )\r\n}\r\n\r\nexport default Result;\r\n\r\n","import '../App.css';\r\nimport '../bootstrap.css';\r\n\r\n\r\nfunction Reset(props) {\r\n\r\n            return (\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={()=> props.setReset()}>reset</button>\r\n            )\r\n}\r\n\r\nexport default Reset;\r\n","import './App.css';\nimport './bootstrap.css';\nimport { useState } from 'react';\nimport ColorPicker from './conponents/ColorPicker';\nimport SetingColor from './conponents/SetingColor';\nimport Result from './conponents/Result';\nimport Reset from './conponents/Reset';\n\nfunction App() {\n    let [name, setName] = useState('red');\n    let [size, setSize] = useState(15);\n   let onSetColor = (color) => {\n      setName(color)\n   }\n\n   \n    let onsetSize = (data) => {\n      if(data >= 8 || data <= 24 ){\n        setSize(data)\n      }\n    }\n\n    let onReset = () => {\n      setSize(15)\n      setName('red')\n    }\n            return (\n                    <div className='container mt-50'>\n                      <div className='row'>\n                        <ColorPicker color={name} onReceColor={onSetColor}/>\n                        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                             <SetingColor size = {size} onSetSize = {onsetSize}/>\n                             <Reset setReset =  {onReset}/>\n                        </div>\n                        <Result color={name} size = {size}/>\n                      </div>\n                    </div>\n            )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}